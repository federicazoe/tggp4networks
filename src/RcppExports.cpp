// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// compute_log_posterior_Pi_cpp
double compute_log_posterior_Pi_cpp(NumericMatrix Pi, NumericMatrix beta_vec);
RcppExport SEXP _tggp4networks_compute_log_posterior_Pi_cpp(SEXP PiSEXP, SEXP beta_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type beta_vec(beta_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_log_posterior_Pi_cpp(Pi, beta_vec));
    return rcpp_result_gen;
END_RCPP
}
// compute_entropy_Pi_cpp
NumericVector compute_entropy_Pi_cpp(NumericMatrix Pi);
RcppExport SEXP _tggp4networks_compute_entropy_Pi_cpp(SEXP PiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Pi(PiSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_entropy_Pi_cpp(Pi));
    return rcpp_result_gen;
END_RCPP
}
// rand_communities
IntegerVector rand_communities(int K, IntegerVector nodes_i_j_idx, IntegerVector N_i_j_sorted, IntegerVector edges_presplit_order, NumericMatrix Pi_i_j);
RcppExport SEXP _tggp4networks_rand_communities(SEXP KSEXP, SEXP nodes_i_j_idxSEXP, SEXP N_i_j_sortedSEXP, SEXP edges_presplit_orderSEXP, SEXP Pi_i_jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nodes_i_j_idx(nodes_i_j_idxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type N_i_j_sorted(N_i_j_sortedSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type edges_presplit_order(edges_presplit_orderSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Pi_i_j(Pi_i_jSEXP);
    rcpp_result_gen = Rcpp::wrap(rand_communities(K, nodes_i_j_idx, N_i_j_sorted, edges_presplit_order, Pi_i_j));
    return rcpp_result_gen;
END_RCPP
}
// rand_dirichlet_singleconc
NumericMatrix rand_dirichlet_singleconc(NumericVector concentrations, int n_samples);
RcppExport SEXP _tggp4networks_rand_dirichlet_singleconc(SEXP concentrationsSEXP, SEXP n_samplesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type concentrations(concentrationsSEXP);
    Rcpp::traits::input_parameter< int >::type n_samples(n_samplesSEXP);
    rcpp_result_gen = Rcpp::wrap(rand_dirichlet_singleconc(concentrations, n_samples));
    return rcpp_result_gen;
END_RCPP
}
// rand_dirichlet_multiconc
NumericMatrix rand_dirichlet_multiconc(NumericMatrix concentrations);
RcppExport SEXP _tggp4networks_rand_dirichlet_multiconc(SEXP concentrationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type concentrations(concentrationsSEXP);
    rcpp_result_gen = Rcpp::wrap(rand_dirichlet_multiconc(concentrations));
    return rcpp_result_gen;
END_RCPP
}
// update_auxiliary_tables
NumericVector update_auxiliary_tables(NumericMatrix M_counts, NumericVector beta_vec, double alpha_0);
RcppExport SEXP _tggp4networks_update_auxiliary_tables(SEXP M_countsSEXP, SEXP beta_vecSEXP, SEXP alpha_0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type M_counts(M_countsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta_vec(beta_vecSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_0(alpha_0SEXP);
    rcpp_result_gen = Rcpp::wrap(update_auxiliary_tables(M_counts, beta_vec, alpha_0));
    return rcpp_result_gen;
END_RCPP
}
// sample_book_keep_concordant
NumericMatrix sample_book_keep_concordant(IntegerVector n_ij, NumericMatrix Pi_ij, NumericMatrix M_counts, IntegerVector rows_obs_edges, IntegerVector cols_obs_edges);
RcppExport SEXP _tggp4networks_sample_book_keep_concordant(SEXP n_ijSEXP, SEXP Pi_ijSEXP, SEXP M_countsSEXP, SEXP rows_obs_edgesSEXP, SEXP cols_obs_edgesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type n_ij(n_ijSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Pi_ij(Pi_ijSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type M_counts(M_countsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rows_obs_edges(rows_obs_edgesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type cols_obs_edges(cols_obs_edgesSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_book_keep_concordant(n_ij, Pi_ij, M_counts, rows_obs_edges, cols_obs_edges));
    return rcpp_result_gen;
END_RCPP
}
// sample_multiple_n_and_p
NumericMatrix sample_multiple_n_and_p(IntegerVector n_ii, NumericMatrix p_ii);
RcppExport SEXP _tggp4networks_sample_multiple_n_and_p(SEXP n_iiSEXP, SEXP p_iiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type n_ii(n_iiSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type p_ii(p_iiSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_multiple_n_and_p(n_ii, p_ii));
    return rcpp_result_gen;
END_RCPP
}
// propose_communities
IntegerVector propose_communities(IntegerVector nodes_i_j_idx, IntegerVector N_i_j_sorted, IntegerVector edges_presplit_order, NumericMatrix Pi);
RcppExport SEXP _tggp4networks_propose_communities(SEXP nodes_i_j_idxSEXP, SEXP N_i_j_sortedSEXP, SEXP edges_presplit_orderSEXP, SEXP PiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type nodes_i_j_idx(nodes_i_j_idxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type N_i_j_sorted(N_i_j_sortedSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type edges_presplit_order(edges_presplit_orderSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Pi(PiSEXP);
    rcpp_result_gen = Rcpp::wrap(propose_communities(nodes_i_j_idx, N_i_j_sorted, edges_presplit_order, Pi));
    return rcpp_result_gen;
END_RCPP
}
// book_keep_selected_edges
NumericMatrix book_keep_selected_edges(NumericMatrix M_counts, IntegerVector nodes_i_j_selected, IntegerVector kappas_selected);
RcppExport SEXP _tggp4networks_book_keep_selected_edges(SEXP M_countsSEXP, SEXP nodes_i_j_selectedSEXP, SEXP kappas_selectedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type M_counts(M_countsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nodes_i_j_selected(nodes_i_j_selectedSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type kappas_selected(kappas_selectedSEXP);
    rcpp_result_gen = Rcpp::wrap(book_keep_selected_edges(M_counts, nodes_i_j_selected, kappas_selected));
    return rcpp_result_gen;
END_RCPP
}
// prepare_R_obs
NumericMatrix prepare_R_obs(int N_nobs, int N, NumericVector w_obs, NumericMatrix Pi_obs, NumericMatrix Pi_nobs);
RcppExport SEXP _tggp4networks_prepare_R_obs(SEXP N_nobsSEXP, SEXP NSEXP, SEXP w_obsSEXP, SEXP Pi_obsSEXP, SEXP Pi_nobsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N_nobs(N_nobsSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w_obs(w_obsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Pi_obs(Pi_obsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Pi_nobs(Pi_nobsSEXP);
    rcpp_result_gen = Rcpp::wrap(prepare_R_obs(N_nobs, N, w_obs, Pi_obs, Pi_nobs));
    return rcpp_result_gen;
END_RCPP
}
// prepare_R_unobs
NumericMatrix prepare_R_unobs(int N_nobs, NumericVector w_nobs, NumericMatrix Pi_nobs);
RcppExport SEXP _tggp4networks_prepare_R_unobs(SEXP N_nobsSEXP, SEXP w_nobsSEXP, SEXP Pi_nobsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N_nobs(N_nobsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w_nobs(w_nobsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Pi_nobs(Pi_nobsSEXP);
    rcpp_result_gen = Rcpp::wrap(prepare_R_unobs(N_nobs, w_nobs, Pi_nobs));
    return rcpp_result_gen;
END_RCPP
}
// sample_unobs_nodes_edges
NumericMatrix sample_unobs_nodes_edges(int N_tot, int N_nobs, int K, NumericVector tot_R, IntegerVector joined_network, NumericMatrix R_obs_unobs, NumericMatrix Pi_all, NumericMatrix M_counts);
RcppExport SEXP _tggp4networks_sample_unobs_nodes_edges(SEXP N_totSEXP, SEXP N_nobsSEXP, SEXP KSEXP, SEXP tot_RSEXP, SEXP joined_networkSEXP, SEXP R_obs_unobsSEXP, SEXP Pi_allSEXP, SEXP M_countsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N_tot(N_totSEXP);
    Rcpp::traits::input_parameter< int >::type N_nobs(N_nobsSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tot_R(tot_RSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type joined_network(joined_networkSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type R_obs_unobs(R_obs_unobsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Pi_all(Pi_allSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type M_counts(M_countsSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_unobs_nodes_edges(N_tot, N_nobs, K, tot_R, joined_network, R_obs_unobs, Pi_all, M_counts));
    return rcpp_result_gen;
END_RCPP
}
// book_keep_edges_counts_ggp
IntegerVector book_keep_edges_counts_ggp(IntegerVector N_ij, IntegerVector rows_obs_edges, IntegerVector cols_obs_edges, IntegerVector N_counts);
RcppExport SEXP _tggp4networks_book_keep_edges_counts_ggp(SEXP N_ijSEXP, SEXP rows_obs_edgesSEXP, SEXP cols_obs_edgesSEXP, SEXP N_countsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type N_ij(N_ijSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rows_obs_edges(rows_obs_edgesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type cols_obs_edges(cols_obs_edgesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type N_counts(N_countsSEXP);
    rcpp_result_gen = Rcpp::wrap(book_keep_edges_counts_ggp(N_ij, rows_obs_edges, cols_obs_edges, N_counts));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_tggp4networks_compute_log_posterior_Pi_cpp", (DL_FUNC) &_tggp4networks_compute_log_posterior_Pi_cpp, 2},
    {"_tggp4networks_compute_entropy_Pi_cpp", (DL_FUNC) &_tggp4networks_compute_entropy_Pi_cpp, 1},
    {"_tggp4networks_rand_communities", (DL_FUNC) &_tggp4networks_rand_communities, 5},
    {"_tggp4networks_rand_dirichlet_singleconc", (DL_FUNC) &_tggp4networks_rand_dirichlet_singleconc, 2},
    {"_tggp4networks_rand_dirichlet_multiconc", (DL_FUNC) &_tggp4networks_rand_dirichlet_multiconc, 1},
    {"_tggp4networks_update_auxiliary_tables", (DL_FUNC) &_tggp4networks_update_auxiliary_tables, 3},
    {"_tggp4networks_sample_book_keep_concordant", (DL_FUNC) &_tggp4networks_sample_book_keep_concordant, 5},
    {"_tggp4networks_sample_multiple_n_and_p", (DL_FUNC) &_tggp4networks_sample_multiple_n_and_p, 2},
    {"_tggp4networks_propose_communities", (DL_FUNC) &_tggp4networks_propose_communities, 4},
    {"_tggp4networks_book_keep_selected_edges", (DL_FUNC) &_tggp4networks_book_keep_selected_edges, 3},
    {"_tggp4networks_prepare_R_obs", (DL_FUNC) &_tggp4networks_prepare_R_obs, 5},
    {"_tggp4networks_prepare_R_unobs", (DL_FUNC) &_tggp4networks_prepare_R_unobs, 3},
    {"_tggp4networks_sample_unobs_nodes_edges", (DL_FUNC) &_tggp4networks_sample_unobs_nodes_edges, 8},
    {"_tggp4networks_book_keep_edges_counts_ggp", (DL_FUNC) &_tggp4networks_book_keep_edges_counts_ggp, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_tggp4networks(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
